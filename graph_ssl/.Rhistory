return(toStrExceptNA(df[i,b1 & b2]))
}
)
g_compl <- sapply(1:nrow(df[,!b1]),
function(i){
return(toStrExceptNA(df[i,!b1],sep=";\n"))
}
)
n <- nrow(df)
new_df <- data.table(g=character(n),x=numeric(n),y=numeric(n))
new_df$setting <- as.factor(g)
new_df$x <- df[,x_var]
new_df$y <- df[,y_var]
print(new_df)
g <- ggplot(data = new_df,aes(x,y,group=setting,colour=setting)) +
geom_line() + ggtitle(paste0(g_compl[1])) + xlab(x_var) +
ylab(y_var)
return(g)
}
g <- linePlot(filtered_df,"corruption_level","mean_acc")
plot(g)
#Suas configs aqui
filterConfig$labeled_percent <- 0.05
filterConfig$dataset <- "gaussians_sd=0.4"
filterConfig$algorithm <- NA
filterConfig$corruption_level <- NA
filter <- function(df,filterConfig,discarded_vars=c()) {
filterConfig<- filterConfig[,!colnames(filterConfig)%in%discarded_vars,]
filterConfig <- filterConfig[,
!as.logical(is.na(filterConfig))]
print(filterConfig)
filter_bool <- sapply(1:nrow(df),function(i){
for (x in colnames(filterConfig)){
nacomp_xor <- xor(is.na(filterConfig[[1,x]]),
is.na(df[[i,x]]))
nacomp_and <- is.na(filterConfig[[1,x]]) &&
is.na(df[[i,x]])
if(is.na(df[[i,x]]) ){
next
}
if (nacomp_xor) {
return(FALSE)
}
if (!nacomp_and && filterConfig[[1,x]] != df[[i,x]]){
return(FALSE)
}
}
return(TRUE)
})
return((df[filter_bool,]))
}
filtered_df <- filter(df,filterConfig)
View(filtered_df)
filtered_df
toStrExceptNA <- function(a,sep=";"){
temp <- as.logical(!is.na(a[1,]))
a <- a[1,temp]
return(paste0(sapply(1:length(a),
function(i){
paste0(colnames(a)[i],"=",
as.character(a[[1,i]]),
sep)
}
),collapse=""))
}
compareNA <- function(v1,v2) {
same <- (v1 == v2) | (is.na(v1) & is.na(v2))
same[is.na(same)] <- FALSE
return(same)
}
linePlot <- function(df,x_var,y_var,
ignore_var = c("elapsed_time","sd_acc","mean_acc")) {
ignore_var <- ignore_var[!ignore_var %in% c(x_var,y_var)]
b1 <- !apply(df,2,function(x){
all(sapply(x,function(y)compareNA(x[1],y)))}
)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
g <- sapply(1:nrow(df[,b1 & b2]),
function(i){
return(toStrExceptNA(df[i,b1 & b2]))
}
)
g_compl <- sapply(1:nrow(df[,!b1]),
function(i){
return(toStrExceptNA(df[i,!b1],sep=";\n"))
}
)
n <- nrow(df)
new_df <- data.table(g=character(n),x=numeric(n),y=numeric(n))
new_df$setting <- as.factor(g)
new_df$x <- df[,x_var]
new_df$y <- df[,y_var]
print(new_df)
g <- ggplot(data = new_df,aes(x,y,group=setting,colour=setting)) +
geom_line() + ggtitle(paste0(g_compl[1])) + xlab(x_var) +
ylab(y_var)
return(g)
}
g <- linePlot(filtered_df,"corruption_level","mean_acc")
linePlot <- function(df,x_var,y_var,
ignore_var = c("elapsed_time","sd_acc","mean_acc")) {
ignore_var <- ignore_var[!ignore_var %in% c(x_var,y_var)]
b1 <- !apply(df,2,function(x){
all(sapply(x,function(y)compareNA(x[1],y)))}
)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
g <- sapply(1:nrow(df[,b1 & b2]),
function(i){
return(toStrExceptNA(df[i,b1 & b2]))
}
)
g_compl <- sapply(1:nrow(df[,!b1]),
function(i){
return(toStrExceptNA(df[i,!b1],sep=";\n"))
}
)
n <- nrow(df)
new_df <- tibble(g=character(n),x=numeric(n),y=numeric(n))
new_df$setting <- as.factor(g)
new_df$x <- df[,x_var]
new_df$y <- df[,y_var]
print(new_df)
g <- ggplot(data = new_df,aes(x,y,group=setting,colour=setting)) +
geom_line() + ggtitle(paste0(g_compl[1])) + xlab(x_var) +
ylab(y_var)
return(g)
}
g <- linePlot(filtered_df,"corruption_level","mean_acc")
plot(g)
linePlot <- function(df,x_var,y_var,
ignore_var = c("elapsed_time","sd_acc","mean_acc")) {
ignore_var <- ignore_var[!ignore_var %in% c(x_var,y_var)]
b1 <- !apply(df,2,function(x){
all(sapply(x,function(y)compareNA(x[1],y)))}
)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
g <- sapply(1:nrow(df[,b1 & b2]),
function(i){
return(toStrExceptNA(df[i,b1 & b2]))
}
)
g_compl <- sapply(1:nrow(df[,!b1]),
function(i){
return(toStrExceptNA(df[i,!b1],sep=";\n"))
}
)
n <- nrow(df)
new_df <- data.frame(g=character(n),x=numeric(n),y=numeric(n))
new_df$setting <- as.factor(g)
new_df$x <- df[,x_var]
new_df$y <- df[,y_var]
print(new_df)
g <- ggplot(data = new_df,aes(x,y,group=setting,colour=setting)) +
geom_line() + ggtitle(paste0(g_compl[1])) + xlab(x_var) +
ylab(y_var)
return(g)
}
g <- linePlot(filtered_df,"corruption_level","mean_acc")
plot(g)
linePlot <- function(df,x_var,y_var,
ignore_var = c("elapsed_time","sd_acc","mean_acc")) {
ignore_var <- ignore_var[!ignore_var %in% c(x_var,y_var)]
b1 <- !apply(df,2,function(x){
all(sapply(x,function(y)compareNA(x[1],y)))}
)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
g <- sapply(1:nrow(df[,b1 & b2]),
function(i){
return(toStrExceptNA(df[i,b1 & b2]))
}
)
g_compl <- sapply(1:nrow(df[,!b1]),
function(i){
return(toStrExceptNA(df[i,!b1],sep=";\n"))
}
)
n <- nrow(df)
new_df <- data.frame(setting=character(n),x=numeric(n),y=numeric(n))
new_df$setting <- as.factor(g)
new_df$x <- df[,x_var]
new_df$y <- df[,y_var]
print(new_df)
g <- ggplot(data = new_df,aes(x,y,group=setting,colour=setting)) +
geom_line() + ggtitle(paste0(g_compl[1])) + xlab(x_var) +
ylab(y_var)
return(g)
}
g <- linePlot(filtered_df,"corruption_level","mean_acc")
plot(g)
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
library(tibble)
library(ggplot2)
setwd("/home/klaus/eclipse-workspace/NN2018/graph_ssl")
df  <- read.csv("./results/joined_gaussian.csv")
df <- df[,colnames(df) != "X"]
df <- as.tibble(df)
df[,sapply(df,class)=="numeric"] %>% round(digits=5)
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
View(new_df)
View(new_df)
View(new_df)
new_df <- as.tibble(data.frame(setting=character(n),x=numeric(n),y=numeric(n)))
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
View(new_df)
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
df[,x_var]
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
View(df)
View(new_df)
View(new_df)
new_df$x
df[,x_var]
df[,x_var]
as.vector(df[,x_var])
colnames(new_df)
new_df$x
View(new_df)
View(new_df)$x.corruption_level
print(new_df)
print(new_df[1,])
print(new_df[2,])
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
print(new_df)
df[,x_var]
as.character(df[,x_var])
as.numeric(as.character(df[,x_var]))
as.numeric(as.character(as.vector(df[,x_var]))
)
(as.character(as.vector(df[,x_var]))
)
(as.character(as.vector(df[[,x_var]]))
)
new_df$setting
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
View(new_df)
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
linePlot <- function(df,x_var,y_var,
ignore_var = c("elapsed_time","sd_acc","mean_acc")) {
ignore_var <- ignore_var[!ignore_var %in% c(x_var,y_var)]
b1 <- !apply(df,2,function(x){
all(sapply(x,function(y)compareNA(x[1],y)))}
)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
g <- sapply(1:nrow(df[,b1 & b2]),
function(i){
return(toStrExceptNA(df[i,b1 & b2]))
}
)
g_compl <- sapply(1:nrow(df[,!b1]),
function(i){
return(toStrExceptNA(df[i,!b1],sep=";\n"))
}
)
n <- nrow(df)
new_df <- as.tibble(data.frame(setting=factor(n),x=numeric(n),y=numeric(n)))
new_df$setting <- as.factor(g)
new_df$x <- df$x_var
new_df$y <- df$y_var
print(new_df)
g <- ggplot(data = new_df,aes(x,y,group=setting,colour=setting)) +
geom_line() + ggtitle(paste0(g_compl[1])) + xlab(as.character(x_var)) +
ylab(as.character(y_var))
return(g)
}
g <- linePlot(filtered_df,"corruption_level","mean_acc")
plot(g)
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
new_df
df$x_var
filtered_df
g_compl
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
df
new_df
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
debugSource('~/eclipse-workspace/NN2018/graph_ssl/visualize_results.R')
n
View(df)
View(filtered_df)
filterConfig <- df[1,hyperparams]
#Suas configs aqui
filterConfig$labeled_percent <- 0.05
filterConfig$dataset <- "gaussians_sd=0.4"
filterConfig$algorithm <- NA
filterConfig$corruption_level <- NA
filterConfig$tuning_iter <- NA
filter <- function(df,filterConfig,discarded_vars=c()) {
filterConfig<- filterConfig[,!colnames(filterConfig)%in%discarded_vars,]
filterConfig <- filterConfig[,
!as.logical(is.na(filterConfig))]
print(filterConfig)
filter_bool <- sapply(1:nrow(df),function(i){
for (x in colnames(filterConfig)){
nacomp_xor <- xor(is.na(filterConfig[[1,x]]),
is.na(df[[i,x]]))
nacomp_and <- is.na(filterConfig[[1,x]]) &&
is.na(df[[i,x]])
if(is.na(df[[i,x]]) ){
next
}
if (nacomp_xor) {
return(FALSE)
}
if (!nacomp_and && filterConfig[[1,x]] != df[[i,x]]){
return(FALSE)
}
}
return(TRUE)
})
return((df[filter_bool,]))
}
filtered_df <- filter(df,filterConfig)
#View(filtered_df)
toStrExceptNA <- function(a,sep=";"){
temp <- as.logical(!is.na(a[1,]))
a <- a[1,temp]
return(paste0(sapply(1:length(a),
function(i){
paste0(colnames(a)[i],"=",
as.character(a[[1,i]]),
sep)
}
),collapse=""))
}
compareNA <- function(v1,v2) {
same <- (v1 == v2) | (is.na(v1) & is.na(v2))
same[is.na(same)] <- FALSE
return(same)
}
linePlot <- function(df,x_var,y_var,
ignore_var = c("elapsed_time","sd_acc","mean_acc")) {
ignore_var <- ignore_var[!ignore_var %in% c(x_var,y_var)]
b1 <- !apply(df,2,function(x){
all(sapply(x,function(y)compareNA(x[1],y)))}
)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
g <- sapply(1:nrow(df[,b1 & b2]),
function(i){
return(toStrExceptNA(df[i,b1 & b2]))
}
)
g_compl <- sapply(1:nrow(df[,!b1]),
function(i){
return(toStrExceptNA(df[i,!b1],sep=";\n"))
}
)
n <- nrow(df)
new_df <- as.tibble(data.frame(setting=factor(n),x=numeric(n),y=numeric(n)))
new_df$setting <- as.factor(g)
new_df$x <- sapply(df[,x_var],as.numeric)
new_df$y <- sapply(df[,y_var],as.numeric)
print(new_df)
g <- ggplot(data = new_df,aes(x,y,group=setting,colour=setting)) +
geom_line() + ggtitle(paste0(g_compl[1])) + xlab(as.character(x_var)) +
ylab(as.character(y_var))
return(g)
}
g <- linePlot(filtered_df,"corruption_level","mean_acc")
plot(g)
g <- linePlot(filtered_df,"corruption_level","sd_acc")
plot(g)
filterConfig$algorithm <- "LDST"
filterConfig$corruption_level <- NA
filterConfig$tuning_iter <- NA
filter <- function(df,filterConfig,discarded_vars=c()) {
filterConfig<- filterConfig[,!colnames(filterConfig)%in%discarded_vars,]
filterConfig <- filterConfig[,
!as.logical(is.na(filterConfig))]
print(filterConfig)
filter_bool <- sapply(1:nrow(df),function(i){
for (x in colnames(filterConfig)){
nacomp_xor <- xor(is.na(filterConfig[[1,x]]),
is.na(df[[i,x]]))
nacomp_and <- is.na(filterConfig[[1,x]]) &&
is.na(df[[i,x]])
if(is.na(df[[i,x]]) ){
next
}
if (nacomp_xor) {
return(FALSE)
}
if (!nacomp_and && filterConfig[[1,x]] != df[[i,x]]){
return(FALSE)
}
}
return(TRUE)
})
return((df[filter_bool,]))
}
filtered_df <- filter(df,filterConfig)
#View(filtered_df)
toStrExceptNA <- function(a,sep=";"){
temp <- as.logical(!is.na(a[1,]))
a <- a[1,temp]
return(paste0(sapply(1:length(a),
function(i){
paste0(colnames(a)[i],"=",
as.character(a[[1,i]]),
sep)
}
),collapse=""))
}
compareNA <- function(v1,v2) {
same <- (v1 == v2) | (is.na(v1) & is.na(v2))
same[is.na(same)] <- FALSE
return(same)
}
linePlot <- function(df,x_var,y_var,
ignore_var = c("elapsed_time","sd_acc","mean_acc")) {
ignore_var <- ignore_var[!ignore_var %in% c(x_var,y_var)]
b1 <- !apply(df,2,function(x){
all(sapply(x,function(y)compareNA(x[1],y)))}
)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
b2 <- !colnames(df) %in% c(x_var,y_var,ignore_var)
g <- sapply(1:nrow(df[,b1 & b2]),
function(i){
return(toStrExceptNA(df[i,b1 & b2]))
}
)
g_compl <- sapply(1:nrow(df[,!b1]),
function(i){
return(toStrExceptNA(df[i,!b1],sep=";\n"))
}
)
n <- nrow(df)
new_df <- as.tibble(data.frame(setting=factor(n),x=numeric(n),y=numeric(n)))
new_df$setting <- as.factor(g)
new_df$x <- sapply(df[,x_var],as.numeric)
new_df$y <- sapply(df[,y_var],as.numeric)
print(new_df)
g <- ggplot(data = new_df,aes(x,y,group=setting,colour=setting)) +
geom_line() + ggtitle(paste0(g_compl[1])) + xlab(as.character(x_var)) +
ylab(as.character(y_var))
return(g)
}
g <- linePlot(filtered_df,"corruption_level","sd_acc")
plot(g)
View(filterConfig)
View(filtered_df)
temp = mlbench::mlbench.spirals(n=1000,sd = 0.44)
X = data.table(temp$x)
colnames(X) = c("V1","V2")
write.csv(X,
paste0("gaussians_sd=",sd,"_X.csv"))
X[,"y"] = temp$classes
ggplot(X,aes(V1,V2,color=y)) + geom_point()
temp = mlbench::mlbench.spirals(n=1000,sd = 0.44)
ggplot(X,aes(V1,V2,color=y)) + geom_point()
temp = mlbench::mlbench.spirals(n=1000,sd = 0.04)
ggplot(X,aes(V1,V2,color=y)) + geom_point()
temp = mlbench::mlbench.spirals(n=1000,sd = 0.04)
X = data.table(temp$x)
colnames(X) = c("V1","V2")
#write.csv(X,
#          paste0("gaussians_sd=",sd,"_X.csv"))
X[,"y"] = temp$classes
ggplot(X,aes(V1,V2,color=y)) + geom_point()
temp = mlbench::mlbench.spirals(n=1000,sd = 0.075)
X = data.table(temp$x)
colnames(X) = c("V1","V2")
#write.csv(X,
#          paste0("gaussians_sd=",sd,"_X.csv"))
X[,"y"] = temp$classes
ggplot(X,aes(V1,V2,color=y)) + geom_point()
temp = mlbench::mlbench.spirals(n=1000,sd = 0.075)
X = data.table(temp$x)
colnames(X) = c("V1","V2")
#write.csv(X,
#          paste0("gaussians_sd=",sd,"_X.csv"))
X[,"y"] = temp$classes
ggplot(X,aes(V1,V2,color=y)) + geom_point()
temp = mlbench::mlbench.spirals(n=1000,sd = 0.075)
X = data.table(temp$x)
colnames(X) = c("V1","V2")
#write.csv(X,
#          paste0("gaussians_sd=",sd,"_X.csv"))
X[,"y"] = temp$classes
ggplot(X,aes(V1,V2,color=y)) + geom_point()
temp = mlbench::mlbench.spirals(n=1000,sd = 0.075)
X = data.table(temp$x)
colnames(X) = c("V1","V2")
#write.csv(X,
#          paste0("gaussians_sd=",sd,"_X.csv"))
X[,"y"] = temp$classes
ggplot(X,aes(V1,V2,color=y)) + geom_point()
temp = mlbench::mlbench.spirals(n=1000,sd = 0.075)
X = data.table(temp$x)
colnames(X) = c("V1","V2")
#write.csv(X,
#          paste0("gaussians_sd=",sd,"_X.csv"))
X[,"y"] = temp$classes
ggplot(X,aes(V1,V2,color=y)) + geom_point()
temp = mlbench::mlbench.spirals(n=1000,sd = 0.075)
X = data.table(temp$x)
colnames(X) = c("V1","V2")
#write.csv(X,
#          paste0("gaussians_sd=",sd,"_X.csv"))
X[,"y"] = temp$classes
ggplot(X,aes(V1,V2,color=y)) + geom_point()
